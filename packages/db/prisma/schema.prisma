generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id BigInt @id @unique @default(autoincrement())

  email         String @unique
  password_hash String

  username     String @unique // max 12 chars
  display_name String // max 50 chars

  occupation String? // max 32 chars
  location   String? // max 32 chars
  pronouns   String? // max 12 chars
  website    String? // max 128 chars

  avatar_url String?

  email_verified Boolean @default(false)
  email_token    String?

  reset_password_token   String?
  reset_password_expires DateTime?

  internal_notes String?

  super_admin Boolean @default(false)
  suspended   Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  notifications_last_read_at DateTime?

  notifications_push_liked_posts Boolean @default(true)
  notifications_push_replied_to  Boolean @default(true)
  notifications_push_mentioned   Boolean @default(true)
  notifications_push_followed    Boolean @default(true)

  marketing_emails Boolean @default(true)

  following              Following[]            @relation("following")
  followers              Following[]            @relation("followers")
  posts                  Post[]                 @relation("posts")
  liked_posts            PostLike[]             @relation("likes")
  ribbons                Ribbon[]               @relation("ribbons")
  mentions               PostMention[]          @relation("mentions")
  notification_endpoints NotificationEndpoint[] @relation("notification_endpoints")
  support_requests       SupportRequest[]       @relation("support_requests")

  @@index([id])
  @@index([username])
  @@map("users")
}

enum NotificationEndpointType {
  WEBPUSH
  IOS
  ANDROID
}

model NotificationEndpoint {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "notification_endpoints", onDelete: Cascade)

  type NotificationEndpointType

  endpoint   Json
  user_agent String?

  enabled Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notification_endpoints")
}

model Following {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "following", onDelete: Cascade)

  target_id BigInt
  target    User   @relation(fields: [target_id], references: [id], name: "followers", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("following")
}

model Post {
  id BigInt @id @unique @default(autoincrement())

  author_id BigInt
  author    User   @relation(fields: [author_id], references: [id], name: "posts", onDelete: Cascade)

  body        String
  attachments Attachment[] @relation("attachments")
  imported    Boolean      @default(false)

  flags Json[]

  highlighted Boolean @default(false)

  deleted_at DateTime?

  scan_status String?

  reply_to_id BigInt?
  reply_to    Post?   @relation(fields: [reply_to_id], references: [id], name: "replies", onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  replies  Post[]        @relation("replies")
  likes    PostLike[]    @relation("likes")
  mentions PostMention[] @relation("mentions")

  @@index([author_id])
  @@map("posts")
}

model PostLike {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "likes", onDelete: Cascade)

  post_id BigInt
  post    Post   @relation(fields: [post_id], references: [id], name: "likes", onDelete: Cascade)

  created_at DateTime @default(now())

  @@map("post_likes")
}

model PostMention {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "mentions", onDelete: Cascade)

  post_id BigInt
  post    Post   @relation(fields: [post_id], references: [id], name: "mentions", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("post_mentions")
}

enum AttachmentType {
  Image
  Video
}

model Attachment {
  id String @id @unique @default(uuid())

  post_id BigInt
  post    Post   @relation(fields: [post_id], references: [id], name: "attachments", onDelete: Cascade)

  type AttachmentType

  url String

  width  Int
  height Int

  scan_status String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("attachments")
}

model Ribbon {
  id BigInt @id @unique @default(autoincrement())

  body String

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "ribbons", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("ribbons")
}

model WhitelistRequest {
  id BigInt @id @unique @default(autoincrement())

  email       String    @unique
  name        String
  accepted_at DateTime?

  posts_cv_url String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("whitelist")
}

model SupportRequest {
  id String @id @unique @default(cuid())

  email String
  body  String
  type  String

  completed_at DateTime?

  user_id BigInt?
  user    User?   @relation(fields: [user_id], references: [id], name: "support_requests", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("support_requests")
}
