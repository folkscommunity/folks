generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id BigInt @id @unique @default(autoincrement())

  email         String @unique
  password_hash String

  username     String @unique // max 12 chars
  display_name String // max 50 chars

  occupation String? // max 32 chars
  location   String? // max 32 chars
  pronouns   String? // max 12 chars
  website    String? // max 128 chars

  last_ping DateTime?

  avatar_url String?

  flags Json[] @default([])

  email_verified Boolean @default(false)
  email_token    String?

  reset_password_token   String?
  reset_password_expires DateTime?

  internal_notes String?

  super_admin Boolean @default(false)
  suspended   Boolean @default(false)

  featured_board_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  notifications_last_read_at DateTime?

  notifications_push_liked_posts Boolean @default(true)
  notifications_push_replied_to  Boolean @default(true)
  notifications_push_mentioned   Boolean @default(true)
  notifications_push_followed    Boolean @default(true)

  marketing_emails Boolean @default(true)

  following                  Following[]            @relation("following")
  followers                  Following[]            @relation("followers")
  posts                      Post[]                 @relation("posts")
  liked_posts                PostLike[]             @relation("likes")
  ribbons                    Ribbon[]               @relation("ribbons")
  mentions                   PostMention[]          @relation("mentions")
  notification_endpoints     NotificationEndpoint[] @relation("notification_endpoints")
  support_requests           SupportRequest[]       @relation("support_requests")
  stickers                   Sticker[]              @relation("stickers")
  message_channel_membership MessageChannelMember[] @relation("message_channel_member")
  messages                   Message[]              @relation("user_message")
  articles                   Article[]              @relation("user_article")
  boards                     Board[]                @relation("boards")
  roadmap_items              RoadmapItem[]          @relation("roadmap_items")

  @@index([id])
  @@index([username])
  @@map("users")
}

enum NotificationEndpointType {
  WEBPUSH
  IOS
  ANDROID
}

model NotificationEndpoint {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "notification_endpoints", onDelete: Cascade)

  type NotificationEndpointType

  endpoint   Json
  user_agent String?

  enabled Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notification_endpoints")
}

model Following {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "following", onDelete: Cascade)

  target_id BigInt
  target    User   @relation(fields: [target_id], references: [id], name: "followers", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("following")
}

model Post {
  id BigInt @id @unique @default(autoincrement())

  author_id BigInt
  author    User   @relation(fields: [author_id], references: [id], name: "posts", onDelete: Cascade)

  body        String
  attachments Attachment[] @relation("attachments")
  imported    Boolean      @default(false)

  flags Json[]

  highlighted Boolean @default(false)

  deleted_at DateTime?

  scan_status String?

  reply_to_id BigInt?
  reply_to    Post?   @relation(fields: [reply_to_id], references: [id], name: "replies", onDelete: SetNull)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  replies  Post[]        @relation("replies")
  likes    PostLike[]    @relation("likes")
  mentions PostMention[] @relation("mentions")
  stickers Sticker[]     @relation("stickers")

  @@index([author_id])
  @@map("posts")
}

model PostLike {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "likes", onDelete: Cascade)

  post_id BigInt
  post    Post   @relation(fields: [post_id], references: [id], name: "likes", onDelete: Cascade)

  created_at DateTime @default(now())

  @@map("post_likes")
}

model PostMention {
  id String @id @unique @default(cuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "mentions", onDelete: Cascade)

  post_id BigInt
  post    Post   @relation(fields: [post_id], references: [id], name: "mentions", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("post_mentions")
}

enum AttachmentType {
  Image
  Video
}

model Attachment {
  id String @id @unique @default(uuid())

  post_id BigInt?
  post    Post?   @relation(fields: [post_id], references: [id], name: "attachments", onDelete: Cascade)

  alt_text String?

  type AttachmentType

  url String

  width  Int
  height Int

  scan_status String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("attachments")
}

model Ribbon {
  id BigInt @id @unique @default(autoincrement())

  body String

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "ribbons", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("ribbons")
}

model WhitelistRequest {
  id BigInt @id @unique @default(autoincrement())

  email       String    @unique
  name        String
  accepted_at DateTime?

  posts_cv_url String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("whitelist")
}

model SupportRequest {
  id String @id @unique @default(cuid())

  email String
  body  String
  type  String

  completed_at DateTime?

  user_id BigInt?
  user    User?   @relation(fields: [user_id], references: [id], name: "support_requests", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("support_requests")
}

model AvailableSticker {
  id   String @id @default(cuid())
  name String

  url String

  restricted Boolean @default(false)

  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  placed_stickers Sticker[] @relation("stickers")

  @@map("available_stickers")
}

model Sticker {
  id String @id @default(cuid())

  post_id BigInt
  post    Post?  @relation(fields: [post_id], references: [id], name: "stickers", onDelete: Cascade)

  posted_by_id BigInt
  posted_by    User?  @relation(fields: [posted_by_id], references: [id], name: "stickers", onDelete: Cascade)

  available_sticker_id String
  available_sticker    AvailableSticker? @relation(fields: [available_sticker_id], references: [id], name: "stickers", onDelete: Cascade)

  y     Int
  x     Float
  angle Int
  side  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("stickers")
}

model MessageChannel {
  id   String  @id @default(uuid())
  name String?

  members MessageChannelMember[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]

  @@map("message_channels")
}

model MessageChannelMember {
  id String @id @default(uuid())

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "message_channel_member", onDelete: Cascade)

  channel_id   String
  channel      MessageChannel @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  last_read_at DateTime?

  muted Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]

  @@unique([channel_id, user_id])
  @@map("message_channel_members")
}

model Message {
  id BigInt @id @default(autoincrement())

  channel_id String
  channel    MessageChannel @relation(fields: [channel_id], references: [id], onDelete: Cascade)

  channel_member_id String
  channel_member    MessageChannelMember @relation(fields: [channel_member_id], references: [id], onDelete: Cascade)

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "user_message", onDelete: Cascade)

  content   String
  edited_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([channel_id])
  @@index([channel_member_id])
  @@index([user_id])
  @@map("messages")
}

model Article {
  id BigInt @id @unique @default(autoincrement())

  slug String

  title     String
  body      String?
  html_body String?
  tags      String[]

  published    Boolean   @default(false)
  published_at DateTime?

  deleted_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  author_id BigInt
  author    User   @relation(fields: [author_id], references: [id], name: "user_article", onDelete: Cascade)

  attachments ArticleAttachment[]

  @@index([id])
  @@index([slug])
  @@map("articles")
}

enum ArticleAttachmentType {
  Image
  Video
}

model ArticleAttachment {
  id String @id @unique @default(uuid())

  article_id BigInt
  article    Article @relation(fields: [article_id], references: [id])

  url      String
  metadata Json?

  type ArticleAttachmentType

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([article_id])
  @@map("article_attachments")
}

model Board {
  id              String  @id @unique
  name            String
  description     String?
  cover_image_url String?

  public Boolean @default(false)

  user_id BigInt
  user    User   @relation(fields: [user_id], references: [id], name: "boards", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  items BoardItem[] @relation("board_items")

  @@index([user_id])
  @@map("boards")
}

enum BoardItemType {
  Image
  Link
  Video
}

model BoardItem {
  id String @id @unique @default(uuid())

  title String?

  type BoardItemType

  url String

  width  Int?
  height Int?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  board_id String
  board    Board  @relation(fields: [board_id], references: [id], name: "board_items", onDelete: Cascade)

  @@index([board_id])
  @@map("board_items")
}

enum RoadmapItemStatus {
  SUGGESTED
  PLANNED
  IN_PROGRESS
  COMPLETED
}

model RoadmapItem {
  id String @id @default(cuid())

  title       String
  description String?

  status RoadmapItemStatus @default(SUGGESTED)

  created_by_id BigInt
  created_by    User   @relation(fields: [created_by_id], references: [id], name: "roadmap_items", onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([status])
  @@map("roadmap_items")
}
